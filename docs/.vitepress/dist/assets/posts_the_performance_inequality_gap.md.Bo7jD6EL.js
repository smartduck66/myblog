import{_ as n,c as a,m as e,a as s,t as r,V as o,o as i,av as u}from"./chunks/framework.DyooxGaQ.js";const C=JSON.parse(`{"title":"Le fossé de l'inégalité des performances","description":"","frontmatter":{"title":"Le fossé de l'inégalité des performances","date":"2023-02-26T00:00:00.000Z","category":["javascript"],"tag":["performance"],"archive":false},"headers":[],"relativePath":"posts/the_performance_inequality_gap.md","filePath":"posts/the_performance_inequality_gap.md"}`),l={name:"posts/the_performance_inequality_gap.md"},d={id:"frontmatter-title",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),c={id:"frontmatter-date-substring-8-10-frontmatter-date-substring-5-7-frontmatter-date-substring-0-4",tabindex:"-1"},m=e("br",null,null,-1),f=e("br",null,null,-1),g=e("a",{class:"header-anchor",href:"#frontmatter-date-substring-8-10-frontmatter-date-substring-5-7-frontmatter-date-substring-0-4","aria-label":'Permalink to ":calendar: {{ $frontmatter.date.substring(8,10) }}/{{ $frontmatter.date.substring(5,7) }}/{{ $frontmatter.date.substring(0,4) }}<br><br>"'},"​",-1),q=o('<br><p><img src="'+u+'" alt="IMG" title="Hiérarchie UX"><br><br> Cette pyramide a été présentée lors de la conférence <a href="https://web.dev/web-performance-made-easy/" target="_blank" rel="noreferrer">Google I/O de 2018</a>. Elle démontrait que la vitesse de chargement d&#39;une page était (et reste toujours) le souci <strong>numéro 1</strong> de tout utilisateur du Web, qu&#39;il soit sur un PC connecté en fibre optique ou sur un mobile surfant en 3G.</p><p>Fin 2022, <a href="https://infrequently.org/about-me/" target="_blank" rel="noreferrer">Alex Russell</a> qui a travaillé 13 ans sur Chrome et maintenant sur Edge chez Microsoft, faisait le point sur le <em>Web performance inegality gap</em> à la conférence <a href="https://infrequently.org/2022/12/performance-baseline-2023/" target="_blank" rel="noreferrer">performance.now()</a> d&#39;Amsterdam. Il argue que &quot;le digital étant devenu la nouvelle norme de notre Société, y accéder lentement est un facteur d&#39;exclusion&quot;. Ce constat a d&#39;ailleurs été dressé il y a plus de 20 ans en France, pour ceux qui possédait une liaison ADSL &quot;poussive&quot; (car trop éloignés du fameux répartiteur) ou qui, dorénavant, n&#39;ont pas accès à une connexion fibre optique...</p><p>Mais la démonstration d&#39;Alex Russell prend le problème par l&#39;autre bout, c&#39;est-à-dire par le <strong>contenu auquel on souhaite accéder</strong>. Et là, les chiffres sont sans appel : &quot;Pour que <a href="https://support.speedcurve.com/docs/performance-for-product-managers#75th-percentile" target="_blank" rel="noreferrer">75%</a> des utilisateurs mondiaux puissent interagir avec une page Web en moins de 5 secondes lors de son premier chargement, son contenu ne doit pas excéder plus de <strong>150 ko</strong> de HTML/CSS/fontes et <strong>300 à 350 ko</strong> de Javascript (gzipped). Le problème est que les sites Web continuent d&#39;envoyer davantage de scripts à plus de 80% des utilisateurs mondiaux, ce qui contribue à augmenter le fossé entre ceux qui possèdent la bonne technologie (PC, mobile et réseau de qualité) et ceux qui n&#39;ont pas cette chance. C&#39;est donc une crise éthique pour le <em>front-end</em>.&quot;</p><h4 id="tout-le-monde-ne-peut-pas-s-offrir-un-iphone-14-ou-un-desktop-dote-d-un-processeur-16-coeurs" tabindex="-1">Tout le monde ne peut pas s&#39;offrir un iPhone 14 ou un <em>desktop</em> doté d&#39;un processeur 16 coeurs <a class="header-anchor" href="#tout-le-monde-ne-peut-pas-s-offrir-un-iphone-14-ou-un-desktop-dote-d-un-processeur-16-coeurs" aria-label="Permalink to &quot;Tout le monde ne peut pas s&#39;offrir un iPhone 14 ou un *desktop* doté d&#39;un processeur 16 coeurs&quot;">​</a></h4><p>Alex Russell se sert de la télémétrie du navigateur Edge pour constater que la moitié de ses usagers possèdent un PC <em>low-end</em> :</p><ul><li>Disque dur (pas de SSD, plus rapide)</li><li>CPU avec 2 à 4 coeurs</li><li>4 Go de mémoire vive ou moins</li></ul><p>Concernant le débit moyen de la connexion Internet fixe, il reprend les chiffres du profil &quot;câble&quot; de <a href="https://www.webpagetest.org" target="_blank" rel="noreferrer">WebPageTest</a>, soit <strong>5 Mbps</strong> (latence de 25 ms), avec un chiffre encore plus mauvais pour les zones rurales.</p><p>Côté Mobile, l&#39;équipement <em>moyen</em> représentatif posséde les caractéristiques suivantes (ex : Samsung Galaxy A50 ou Nokia G11) :</p><ul><li>Processeur ARM 8 coeurs, lent, peu de cache mémoire</li><li>4 Go de mémoire vive</li><li>4G</li></ul><p>Le réseau mobile d&#39;accès, quant à lui, fournit en moyenne une bande passante de <strong>9 Mbps</strong> (latence de 170 ms).</p><h4 id="le-fosse-de-l-inegalite-des-performances-s-accroit" tabindex="-1">Le fossé de l&#39;inégalité des performances s&#39;accroit <a class="header-anchor" href="#le-fosse-de-l-inegalite-des-performances-s-accroit" aria-label="Permalink to &quot;Le fossé de l&#39;inégalité des performances s&#39;accroit&quot;">​</a></h4><p>Ces chiffres doivent nous faire réfléchir. Que l&#39;on soit développeur, designer, Product Manager ou sponsor d&#39;un produit digital. Encore plus quand l&#39;on intervient dans la sphère publique. En effet, la plupart des services publics, dans le Monde, sont ou vont être accessibles digitalement. Songez à la complexité de déclarer ses impôts en &quot;mode papier&quot;, depuis quelques années.</p><p>Alex Russell nous donne un exemple édifiant d&#39;une expérience récente avec CA.gov, le site des services publics de l&#39;Etat de Californie où il réside. Il constate début novembre sa subite lenteur, analyse qu&#39;il est développé avec React et Next.js et &quot;toute une panoplie d&#39;horreurs modernes&quot;. Il en avertit les responsables qui décident de revenir promptement à un développement <em>HTML-first</em>, ce qui améliore drastiquement les performances de ce site vital pour les quelques 40 millions de californiens.</p><h4 id="notre-aveuglement-a-recourir-systematiquement-a-un-framework-javascript" tabindex="-1">Notre aveuglement (?) à recourir systématiquement à un framework Javascript <a class="header-anchor" href="#notre-aveuglement-a-recourir-systematiquement-a-un-framework-javascript" aria-label="Permalink to &quot;Notre aveuglement (?) à recourir systématiquement à un framework Javascript&quot;">​</a></h4><p>Ni une, ni deux, Alex Russell embraye sur un article qui a fait couler beaucoup d&#39;encre depuis quelques semaines. En effet, <a href="https://infrequently.org/2023/02/the-market-for-lemons/" target="_blank" rel="noreferrer">The market for Lemons</a> est une charge en règle contre le &quot;trop-plein&quot; de Javascript en général, et les frameworks JS en particulier. Ce n&#39;est certes pas nouveau et de nombreuses voix s&#39;élèvent depuis plusieurs années contre la &quot;tyrannie&quot; des <em>Single Page Applications</em> qui encombrent le client et ont <strong>détourné le Web de ses fondamentaux</strong>. Mais, cette fois, notre sémillant architecte va beaucoup plus loin et parle &quot;d&#39;une décennie perdue&quot; et quasiment d&#39;un complot de ces vendeurs de solutions. Notons tout de même que quelques outils plus <em>light</em> trouvent grâce à ses yeux tels que Vue, Svelte ou encore Eleventy.</p><p>Sans prendre parti dans ce débat très clivant, il est bon de rappeler quelques faits :</p><ul><li>La répartition des tâches entre <strong>client et serveur</strong> est aussi vieux que l&#39;informatique. L&#39;antique terminal IBM était &quot;bête comme ses pieds&quot;, puis l&#39;ordinateur personnel est venu bousculer le <em>statu quo</em> à partir de 1975, suivi du déploiement massif des applications client &quot;lourd&quot;/serveur dans les années 80/90... pour revenir à plus &quot;d&#39;équité&quot; depuis le début de ce siècle avec la déferlante des architectures Web. Bref, tout est affaire d&#39;équilibre sur les 3 &quot;morceaux&quot; immuables de la chaîne que sont le client, le réseau et le serveur.</li><li>Choisir un framework, des composants sur étagère ou n&#39;importe quelle librairie qui vous permet d&#39;améliorer votre productivité de développeur n&#39;est pas déraisonnable... à partir du moment <strong>où vous maitrisez suffisamment les sous-jacents</strong> pour prendre une décision éclairée. Utiliser un framework JS qui facilite la construction de composants Web sans savoir bien coder en HTML, CSS et Javascript, c&#39;est comme conduire sans permis. Cela va &quot;rouler&quot; jusqu&#39;à la sortie de route, i.e. l&#39;application trop lente, impossible à maintenir.</li><li>Tout développeur doit savoir quel outil utiliser pour répondre au besoin exprimé. Pourquoi utiliser Angular, React ou Vue quand une solution <em>Jamstack</em> telle qu&#39;Astro ou VitePress suffit ?</li><li>Même si HTML et CSS ne sont pas considérés comme des langages de programmation, ils ont fortement évolué depuis 15 ans. Nombre de sites Web ne nécessitent pas d&#39;utiliser massivement Javascript. Il suffit, par contre, de faire l&#39;effort <strong>d&#39;étudier un peu plus</strong> ces &quot;langages déclaratifs&quot; afin de mieux en tirer parti... et d&#39;obtenir des sites plus légers.</li><li>Dans la même veine, la plateforme Web (i.e. les navigateurs) évolue régulièrement en offrant de nouvelles API qui peuvent remplacer avantageusement des librairies externes. Fetch ou la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API" target="_blank" rel="noreferrer">Web Authentication API</a> en sont de bons exemples. <strong>#usetheplatform</strong></li></ul><h4 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h4><p>Le navigateur NCSA Mosaic fête ses 30 ans. Il a en effet été publié en 1993, alors que le World Wide Web développé par le CERN ne comptait que 200 sites, 3 ans après son lancement. Cette révolution portait déjà en son sein &quot;le fossé de l&#39;inégalité des performances&quot;, en partant du fait que le Monde entier allait pouvoir se connecter à Internet et bénéficier de ses multiples apports... <strong>mais sans posséder</strong> justement les mêmes moyens d&#39;accès.</p><p>Cette situation n&#39;est pas prête de s&#39;améliorer, comme Alex Russell l&#39;a abondamment démontrée, statistiques à l&#39;appui. La bonne nouvelle est que tous les outils existent pour respecter la limite des quelques 500 ko par page. Je vous encourage d&#39;ailleurs à parcourir le billet <a href="/posts/lighthouse.html">Lighthouse</a> que j&#39;avais commis en janvier dernier 😉</p><p><a href="/">&gt; Accueil</a> <a href="/articles.html">&gt; Tous les articles</a></p>',22);function b(t,h,v,_,x,k){return i(),a("div",null,[e("h1",d,[s(r(t.$frontmatter.title)+" ",1),p]),e("h5",c,[s("📆 "+r(t.$frontmatter.date.substring(8,10))+"/"+r(t.$frontmatter.date.substring(5,7))+"/"+r(t.$frontmatter.date.substring(0,4)),1),m,f,s(),g]),q])}const P=n(l,[["render",b]]);export{C as __pageData,P as default};
