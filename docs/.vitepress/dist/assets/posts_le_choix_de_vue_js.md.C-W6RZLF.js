import{_ as i,c as r,m as e,a,t,V as n,o,ak as l,al as u}from"./chunks/framework.DyooxGaQ.js";const S=JSON.parse('{"title":"Le choix de Vue.js","description":"","frontmatter":{"title":"Le choix de Vue.js","date":"2022-08-30T00:00:00.000Z","category":["framework"],"tag":["javascript"],"archive":false},"headers":[],"relativePath":"posts/le_choix_de_vue_js.md","filePath":"posts/le_choix_de_vue_js.md"}'),d={name:"posts/le_choix_de_vue_js.md"},p={id:"frontmatter-title",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"‚Äã",-1),m={id:"frontmatter-date-substring-8-10-frontmatter-date-substring-5-7-frontmatter-date-substring-0-4",tabindex:"-1"},h=e("br",null,null,-1),f=e("br",null,null,-1),g=e("a",{class:"header-anchor",href:"#frontmatter-date-substring-8-10-frontmatter-date-substring-5-7-frontmatter-date-substring-0-4","aria-label":'Permalink to ":calendar: {{ $frontmatter.date.substring(8,10) }}/{{ $frontmatter.date.substring(5,7) }}/{{ $frontmatter.date.substring(0,4) }}<br><br>"'},"‚Äã",-1),v=n('<p>Chose promise, chose due ! Je vous avais d√©voil√© dans un pr√©c√©dent billet mon intention d&#39;utiliser un framework JS et mon choix s&#39;est donc arr√™t√© sur Vue.js, l&#39;un des rares frameworks √† avoir un nom bien fran√ßais üòâ En fait, je n&#39;ai pas imm√©diatement d√©marr√© l&#39;ann√©e 2022 sur Vue car j&#39;ai d&#39;abord pr√©f√©r√© consolider mes bases sur le tryptique &quot;HTML-CSS-JS&quot; en portant mon <a href="./pourquoi_c_plus_plus.html">logiciel de donn√©es climatiques</a> √©crit initialement en C++. J&#39;ai tout de m√™me utilis√© la librairie <a href="https://bulma.io/" target="_blank" rel="noreferrer">Bulma</a> qui m&#39;a facilit√© la vie dans l&#39;√©criture de mon code CSS.</p><h4 id="c-est-parti" tabindex="-1">C&#39;est parti ! <a class="header-anchor" href="#c-est-parti" aria-label="Permalink to &quot;C&#39;est parti !&quot;">‚Äã</a></h4><p>Contrairement √† mon <a href="./web_discovery.html">apprentissage du web</a> d√©but√© l&#39;ann√©e derni√®re, j&#39;ai pr√©f√©r√© suivre le <a href="https://vuejs.org/guide/introduction.html" target="_blank" rel="noreferrer">tutoriel</a> du site officiel, sans acheter d&#39;ouvrage. L&#39;avantage ind√©niable de Vue.js versus Angular ou React est vraiment sa simplicit√© d&#39;acc√®s. J&#39;ai discut√© avec plusieurs d√©veloppeurs qui m&#39;ont d&#39;ailleurs fortement conseill√© de d√©marrer par ce framework, avant d&#39;essayer un autre outil. D&#39;ailleurs, au vu des annonces dans le monde de l&#39;open source, nous n&#39;avons que l&#39;embarras du choix dans ce secteur üòÇ Ce qui me conforte dans le fait que bien ma√Ætriser JavaScript est fondamental pour passer ais√®ment d&#39;un framework √† l&#39;autre le cas √©ch√©ant. D&#39;ailleurs, une &quot;petite&quot; information en passant, m√™me si ce n&#39;est pas le sujet de l&#39;article : j&#39;en ai profit√© pour substituer TypeScript √† JavaScript, ce qui contribue √† mon sens √† un code plus s√©curis√©. Venant d&#39;un langage fortement typ√© (C++), c&#39;√©tait finalement assez naturel pour moi. J&#39;ai donc construit une premi√®re <em>stack</em> technique autour de Vue 3, Vite, TypeScript, Pinia, VueUse, PrimeVue et la base de donn√©es Planetscale. Je vais vous d√©tailler les raisons de ces choix.</p><h4 id="vue-vite-typescript-de-solides-fondations" tabindex="-1">Vue + Vite + TypeScript, de solides fondations <a class="header-anchor" href="#vue-vite-typescript-de-solides-fondations" aria-label="Permalink to &quot;Vue + Vite + TypeScript, de solides fondations&quot;">‚Äã</a></h4><p>La cr√©ation du squelette de l&#39;application est r√©ellement tr√®s simple. Il vous suffit de taper la commande suivante et de suivre les quelques instructions mentionn√©es :</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm create vite@latest votreprojet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ts</span></span></code></pre></div><p>En vous connectant √† l&#39;adresse <code>http://localhost:5173</code>, vous aurez le plaisir de voir appara√Ætre cette page : <br><br><img src="'+l+'" alt="vite_vue" title="Page d&#39;accueil suite √† l&#39;installation de Vue3"><br> L&#39;arborescence en r√©sultant, sous vscode : <br><br><img src="'+u+`" alt="vite_vue" title="L&#39;arborescence des fichiers sous vscode"><br> Et c&#39;est tout l&#39;int√©r√™t d&#39;un framework : disposer d&#39;un cadre minimal si possible l√©ger et modulaire, afin de ne pas d√©marrer d&#39;une feuille blanche. Vue vous propose une arborescence que vous peuplerez avec votre propre biblioth√®que de composants. C&#39;est sur cette notion fondamentale, d√©finir des &quot;web components&quot;, que le framework cr√©√© par <a href="https://evanyou.me/" target="_blank" rel="noreferrer">Evan You</a> en 2014 prend en effet toute sa dimension. Dans le cas de Vue, ces composants sont structur√©s autour de trois sections : la premi√®re d√©di√©e au code JS, la seconde au templating HTML, la troisi√®me au CSS. Cette v√©ritable encapsulation, avec des m√©canismes de dialogue entre composants, rend le d√©veloppement Web tr√®s efficace, d&#39;autant plus quand le typage de <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">Typescript</a> vous guide en &quot;temps r√©el&quot; pour √©viter les erreurs de code. C&#39;est d&#39;ailleurs avec <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>, install√© en m√™me temps que Vue, que j&#39;ai d√©couvert la fonction Hot Module Reload (HMR) qui fluidifie grandement votre travail de d√©veloppeur : les modifications d&#39;un composant sont charg√©es &quot;√† la vol√©e&quot; et vous constatez sans d√©lai la r√©sultante ! Magique ü§©</p><h4 id="pinia-ou-comment-gerer-simplement-les-etats-de-l-application" tabindex="-1">Pinia ou comment g√©rer simplement les √©tats de l&#39;application <a class="header-anchor" href="#pinia-ou-comment-gerer-simplement-les-etats-de-l-application" aria-label="Permalink to &quot;Pinia ou comment g√©rer simplement les √©tats de l&#39;application&quot;">‚Äã</a></h4><p>Tr√®s vite, vous aurez besoin de partager des variables entre composants. Dans mon cas, des couleurs, des <em>responsive breakpoints</em>, des formats mon√©taires ou de date, des URLs... sont des donn√©es qui n&#39;ont nul besoin d&#39;√™tre d√©clar√©es dans CHAQUE composant. Cette &quot;gestion des √©tats&quot; est d√©sormais assur√©e par <a href="https://pinia.vuejs.org/" target="_blank" rel="noreferrer">Pinia</a>, un &quot;Vue store&quot; rapide et l√©ger, qui se cr√©e au d√©marrage de l&#39;application et demeure persistant tant qu&#39;elle est active. Le risque est d&#39;ailleurs de trop l&#39;utiliser sans laisser en local, dans le composant m√™me, des variables qui ne serviront jamais &quot;√† l&#39;ext√©rieur&quot;.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../assets/mixins/store.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;store.sm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><br><h4 id="vueuse-une-collection-d-utilitaires-et-primevue-une-librairie-de-composants-graphiques" tabindex="-1">VueUse, une collection d&#39;utilitaires et PrimeVue, une librairie de composants graphiques <a class="header-anchor" href="#vueuse-une-collection-d-utilitaires-et-primevue-une-librairie-de-composants-graphiques" aria-label="Permalink to &quot;VueUse, une collection d&#39;utilitaires et PrimeVue, une librairie de composants graphiques&quot;">‚Äã</a></h4><p>Vue 3 pr√¥ne le mode &quot;Composition API&quot; qui permet de concevoir des composants utilisant des fonctions import√©es, telles que des APIs de r√©activit√©, des <em>hooks</em> ou encore des injections de d√©pendance. La syntaxe <code>&lt;script setup&gt;</code> dans des <em>Single File Components</em> (SFC) favorise la r√©utilisation de code. Dans ce cadre, les utilitaires fournis par <a href="https://vueuse.org/" target="_blank" rel="noreferrer">VueUse</a> vous apporteront plus de 200 fonctions dans des domaines tr√®s divers ; pour ma part, j&#39;utilise par exemple <code>{ breakpointsTailwind, useBreakpoints }</code> qui proposent des <em>breakpoints</em> r√©actifs tr√®s pratiques pour adapter votre code CSS en fonction de l&#39;√©cran de l&#39;utilisateur. De m√™me, pourquoi passer des jours √† r√©√©crire des composants graphiques comme un calendrier ou un √©diteur alors que <a href="https://www.primefaces.org/primevue/" target="_blank" rel="noreferrer">PrimeVue</a> met √† votre disposition des dizaines d&#39;√©l√©ments plut√¥t bien con√ßus et que vous pouvez d&#39;ailleurs <em>tweaker</em>. <a href="https://vuetifyjs.com/en/" target="_blank" rel="noreferrer">Vuetify</a> propose √©galement des composants <em>material design</em>. L√† se trouvent notamment de vrais gains de productivit√© qui vous permettent de mieux vous concentrer sur le fonctionnel sp√©cifique de votre application.</p><h4 id="planetscale-une-base-de-donnees-serverless" tabindex="-1">Planetscale, une base de donn√©es serverless <a class="header-anchor" href="#planetscale-une-base-de-donnees-serverless" aria-label="Permalink to &quot;Planetscale, une base de donn√©es serverless&quot;">‚Äã</a></h4><p>En g√©n√©ral, qui dit base de donn√©es, dit back office. Ce n&#39;est pas obligatoire car g√©rer des donn√©es en local peut parfois suffire, et c&#39;est la m√©thode que j&#39;ai utilis√©e pour mes premiers &quot;petits&quot; projets. Plus r√©cemment, j&#39;ai n√©anmoins eu besoin de faire appel √† une table qui stockait 5 Mo de donn√©es et l√†, ce n&#39;est plus tr√®s efficient de les charger localement. Apr√®s quelques recherches, j&#39;ai adopt√© la solution SaaS <a href="https://planetscale.com/" target="_blank" rel="noreferrer">Planetscale</a> qui vous permet d&#39;acc√©der √† une base de donn√©es MySQL totalement manag√©e : vous n&#39;avez donc plus besoin d&#39;installer et de g√©rer vous-m√™me une base de donn√©es sur Heroku, AWS, GCP ou autre platform.sh. Il vous suffit d&#39;√©crire une fonction serverless que votre plateforme d&#39;h√©bergement ex√©cutera, pour acc√©der d&#39;une mani√®re s√©curis√©e √† la base de donn√©es distante. Pour ma part, j&#39;utilise netlify qui propose des explications assez claires sur l&#39;int√©r√™t d&#39;utiliser le <a href="https://docs.netlify.com/functions/overview/" target="_blank" rel="noreferrer">serverless</a> ainsi que des <a href="https://functions.netlify.com/examples/" target="_blank" rel="noreferrer">dizaines d&#39;exemples</a>.</p><h4 id="go-prod" tabindex="-1">GO PROD ! <a class="header-anchor" href="#go-prod" aria-label="Permalink to &quot;GO PROD !&quot;">‚Äã</a></h4><p>D√©velopper localement, c&#39;est bien mais pouvoir d√©ployer son application, c&#39;est encore mieux üòÑ Classiquement, je m&#39;appuie sur GitHub pour stocker mon code et mes <em>repositories</em> sont &quot;connect√©s&quot; √† netlify qui permet de d√©ployer tr√®s simplement son application Vue.js packag√©e par Vite. Je ne suis d&#39;ailleurs pas encore venu √† bout des 300 minutes mensuelles de build incluses dans l&#39;offre gratuite de netlify.<br> Ces derni√®res ann√©es ont vraiment vu le <em>tooling</em> Web progresser spectaculairement, avec un d√©veloppement en local bien plus efficace, relay√© en bout de cha√Æne par une fluidit√© de mise en production. Sinc√®rement, nul besoin maintenant d&#39;acqu√©rir des comp√©tences <em>devops</em> pouss√©es ou de passer des heures √† installer une machine virtuelle ou un container docker : un tryptique Vue JS/netlify/outils SaaS peut r√©pondre √† une foule de besoins. Vous devrez soigner les aspects s√©curit√© (pas de <em>secret</em> qui tra√Æne dans votre code front) et v√©rifier le co√ªt r√©current des plateformes SaaS, mais c&#39;est une <em>stack</em> technique √† ne pas n√©gliger.</p><h4 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">‚Äã</a></h4><p>Ce premier billet &quot;√©crit √† chaud&quot; sera compl√©t√© l&#39;ann√©e prochaine, au fur et √† mesure de ma ma√Ætrise du framework. Par exemple, je n&#39;ai pas eu recours √† Vue Router pour le moment, alors que c&#39;est une brique essentielle d√®s que l&#39;application grandit, que l&#39;on veuille quitter le paradigme <em>Single Page Application</em> (SPA) ou bien quand l&#39;on souhaite charger du code dynamiquement en m√©moire. D&#39;autre part, la communaut√© tr√®s importante autour de Vue.js lui apporte r√©guli√®rement des am√©liorations que j&#39;exploiterai graduellement üëç</p><p><a href="/">&gt; Accueil</a> <a href="/articles.html">&gt; Tous les articles</a></p>`,20);function k(s,b,q,_,y,E){return o(),r("div",null,[e("h1",p,[a(t(s.$frontmatter.title)+" ",1),c]),e("h5",m,[a("üìÜ "+t(s.$frontmatter.date.substring(8,10))+"/"+t(s.$frontmatter.date.substring(5,7))+"/"+t(s.$frontmatter.date.substring(0,4)),1),h,f,a(),g]),v])}const C=i(d,[["render",k]]);export{S as __pageData,C as default};
